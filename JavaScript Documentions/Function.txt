1) Functions
 we need to perform a similar action in many places of the script.
 Functions are the main “building blocks” of the program. They allow the code to be called many times without repetition.
 
 ->Function Declaration
 To create a function we can use a function declaration.
 /*
 function showMessage() {
  alert( 'Hello everyone!' );
}
*/
showMessage();
showMessage();
The call showMessage() executes the code of the function. Here we will see the message two times.
This example clearly demonstrates one of the main purposes of functions: to avoid code duplication.
If we ever need to change the message or the way it is shown, it’s enough to modify the code in one place: the function which outputs it.

->Local variables
A variable declared inside a function is only visible inside that function.
/*
function showMessage() {
  let message = "Hello, I'm JavaScript!"; // local variable
  alert( message );
}
showMessage(); // Hello, I'm JavaScript!
alert( message ); // <-- Error! The variable is local to the function
*/

->Outer variables
A function can access an outer variable as well, for example:
/*
let userName = 'John';
function showMessage() {
  let message = 'Hello, ' + userName;
  alert(message);
}
showMessage(); // Hello, John
*/
The function has full access to the outer variable. It can modify it as well.

->Global variables
Variables declared outside of any function, such as the outer userName in the code above, are called global.
Global variables are visible from any function (unless shadowed by locals).

->Parameters
We can pass arbitrary data to functions using parameters (also called function arguments) .
In the example below, the function has two parameters: from and text.
/*
  function showMessage(from, text) { // arguments: from, text
  alert(from + ': ' + text);
}
showMessage('Ann', 'Hello!'); // Ann: Hello! (*)
showMessage('Ann', "What's up?"); // Ann: What's up? (**)
*/

->Default values
If a parameter is not provided, then its value becomes undefined.
/*
showMessage("Venky");
*/
That’s not an error. Such a call would output "Ann: undefined". There’s no text, so it’s assumed that text === undefined.

->Returning a value
A function can return a value back into the calling code as the result.
The simplest example would be a function that sums two values:
/*
function sum(a, b) {
  return a + b;
}
let result = sum(1, 2);
alert( result ); // 3
*/
The directive return can be in any place of the function. When the execution reaches it, the function stops, and the value is returned to the calling code (assigned to result above).
A function with an empty return or without it returns undefined
If a function does not return a value, it is the same as if it returns undefined:
An empty return is also the same as return undefined:

->Naming a function
For instance, functions that start with "show" usually show something.
Function starting with…
"get…" – return a value,
"calc…" – calculate something,
"create…" – create something,
"check…" – check something and return a boolean, etc.

->Summary
A function declaration looks like this:
/*
function name(parameters, delimited, by, comma) {
  /* code */
}
*/
Values passed to a function as parameters are copied to its local variables.
A function may access outer variables. But it works only from inside out. The code outside of the function doesn’t see its local variables.
A function can return a value. If it doesn’t, then its result is undefined.
To make the code clean and easy to understand, it’s recommended to use mainly local variables and parameters in the function, not outer variables.
*It is always easier to understand a function which gets parameters, works with them and returns a result than a function which gets no parameters, but modifies outer variables as a side-effect.
*Function naming:
A name should clearly describe what the function does. When we see a function call in the code, a good name instantly gives us an understanding what it does and returns.
A function is an action, so function names are usually verbal.
There exist many well-known function prefixes like create…, show…, get…, check… and so on. Use them to hint what a function does.
Functions are the main building blocks of scripts. Now we’ve covered the basics, so we actually can start creating and using them. 
But that’s only the beginning of the path. We are going to return to them many times, going more deeply into their advanced features.

->Function expressions
There is another syntax for creating a function that is called a Function Expression.
/*
let sayHi = function() {
  alert( "Hello" );
};
*/
Here, the function is created and assigned to the variable explicitly, like any other value. No matter how the function is defined, it’s just a value stored in the variable sayHi.

->callback function
*A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action. 
Here is a quick example: ... The above example is a synchronous callback, as it is executed immediately.
*Callback Functions are a frequently used feature in JavaScript. Because functions in JavaScript are first-class objects, it means that we can pass the name of one or more functions to another function.
*The function names that are passed can be used to call those other functions when the current tasks are completed. The functions that are passed in as parameters to be called later are known as Callback Functions.

->Function Expression vs Function Declaration
*1)Function Expression
In strict mode, when a Function Declaration is within a code block, it’s visible everywhere inside that block. But not outside of it.
For instance, let’s imagine that we need to declare a function welcome() depending on the age variable that we get during runtime. And then we plan to use it some time later.
If we use Function Declaration, it won’t work as intended:
/*
let age = prompt("What is your age?", 18);
// conditionally declare a function
if (age < 18) {
  function welcome() {
    alert("Hello!");
  }
} else {
  function welcome() {
    alert("Greetings!");
  }
}
// ...use it later
welcome(); // Error: welcome is not defined
*/

*2)Function Declaration
What can we do to make welcome visible outside of if?
The correct approach would be to use a Function Expression and assign welcome to the variable that is declared outside of if and has the proper visibility.
This code works as intended:
/*
let age = prompt("What is your age?", 18);
let welcome;
if (age < 18) {
  welcome = function() {
    alert("Hello!");
  };
} else {
  welcome = function() {
    alert("Greetings!");
  };
}
welcome(); // ok now
*/

->Summary
Functions are values. They can be assigned, copied or declared in any place of the code.
If the function is declared as a separate statement in the main code flow, that’s called a “Function Declaration”.
If the function is created as a part of an expression, it’s called a “Function Expression”.
Function Declarations are processed before the code block is executed. They are visible everywhere in the block.
Function Expressions are created when the execution flow reaches them.
In most cases when we need to declare a function, a Function Declaration is preferable, because it is visible prior to the declaration itself. That gives us more flexibility in code organization, and is usually more readable.
So we should use a Function Expression only when a Function Declaration is not fit for the task. We’ve seen a couple of examples of that in this chapter, and will see more in the future.

->Arrow functions
There’s another very simple and concise syntax for creating functions, that’s often better than Function Expressions.
It’s called “arrow functions”, because it looks like this:
/*
let func = (arg1, arg2, ...argN) => expression
*/

 /*
 let sum = (a, b) => a + b;

// This arrow function is a shorter form of:
*/
*As you can, see (a, b) => a + b means a function that accepts two arguments named a and b. Upon the execution, it evaluates the expression a + b and returns the result.
*Arrow functions can be used in the same way as Function Expressions.
For instance, to dynamically create a function:
/*
 let age = prompt("What is your age?", 18);
let welcome = (age < 18) ?
  () => alert('Hello') :
  () => alert("Greetings!");
welcome(); // ok now
*/

->Multiline arrow functions
The examples above took arguments from the left of => and evaluated the right-side expression with them.
Sometimes we need something a little bit more complex, like multiple expressions or statements. It is also possible, but we should enclose them in curly braces. Then use a normal return within them.
/*
let sum = (a, b) => {  // the curly brace opens a multiline function
  let result = a + b;
  return result; // if we use curly braces, then we need an explicit "return"
};
alert( sum(1, 2) ); // 3
*/

->Summary
Arrow functions are handy for one-liners. They come in two flavors:
Without curly braces: (...args) => expression – the right side is an expression: the function evaluates it and returns the result.
With curly braces: (...args) => { body } – brackets allow us to write multiple statements inside the function, but we need an explicit return to return something.
*Arrow functions:
Do not have this
Do not have arguments
Can’t be called with new
They also don’t have super, but we didn’t study it yet. We will on the chapter Class inheritance
That’s because they are meant for short pieces of code that do not have their own “context”, but rather work in the current one. And they really shine in that use case.
