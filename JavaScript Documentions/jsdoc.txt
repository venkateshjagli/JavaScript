************JavaScript Documentions**************
What is JavaScript?

	a. JavaScript was initially created to “make web pages alive”.
	b. Javascript (JS) is a scripting languages, primarily used on the Web. It is used to enhance HTML pages and is commonly found embedded in HTML code. JavaScript is an interpreted language. 
		The programs in this language are called scripts. They can be written right in a web page’s HTML and run automatically as the page loads.
	c. JavaScript became a fully independent language with its own specification called ECMAScript.
	d. JavaScript can be run on any device that has a special program called the JavaScript engine.
	e. JavaScript was initially created as a browser-only language, but is now used in many other environments as well.
	f. JavaScript has a unique position as the most widely-adopted browser language with full integration with HTML/CSS.
	g. There are many languages that get “transpiled” to JavaScript and provide certain features. 
	h. The ECMA-262 specification contains the most in-depth, detailed and formalized information about JavaScript. It defines the language.

References : 
https://developer.mozilla.org/en-US/docs/Web/JavaScript
https://javascript.info/

The JavaScript engine.

JavaScript can execute not only in the browser, but also on the server, or actually on any device that has a special program called the JavaScript engine.
The browser has an embedded engine sometimes called a “JavaScript virtual machine”.

Different engines :
	a. V8 – Chrome and Opera.
	b. SpiderMonkey – Firefox.
	c. Trident, Chakra - IE - Internet Explorer
	d. ChakraCore - MS Edge 
	e. Nitro, SquirrelFish - Safari

How do engines work?
	a. The engine (embedded if it’s a browser) reads (“parses”) the script.
	b. it converts (“compiles”) the script to the machine language.
	c. the machine code runs, pretty fast.

How Javascript works in browser ?
JavaScript can do everything related to webpage manipulation, interaction with the user, and the webserver.

	a. Add new HTML to the page, change the existing content, modify styles.
	b. React to user actions, run on mouse clicks, pointer movements, key presses.
	c.Send requests over the network to remote servers, download and upload files (so-called AJAX and COMET technologies).
	d. Get and set cookies, ask questions to the visitor, show messages.
	e. Remember the data on the client-side (“local storage”).

What makes JavaScript unique?
	a. Full integration with HTML/CSS.
	b. Simple things are done simply.
	c. Support by all major browsers and enabled by default.

Languages over JavaScript ?
Convert(transpiled) any other languages to JavaScript like TypeScript which can be written in TypeScript Language [Microsoft].
 	
Code editors (IDE - Integrated Development Environment)?
	a. IDE
		1. Visual Studio Code (cross-platform, free).
		2. WebStorm (cross-platform, paid).
	b. Lightweight
		1. Atom (cross-platform, free).
		2. Visual Studio Code (cross-platform, free).
		3. Sublime Text (cross-platform, shareware).
		4. Notepad++ (Windows, free).
		5. Vim and Emacs are also cool if you know how to use them.

Developer console? Learn how debug code and contro keys to debug and check the data in console

Script Tag :
JavaScript programs can be inserted into any part of an HTML document with the help of the <script> tag.
The <script> tag contains JavaScript code which is automatically executed when the browser processes the tag.

		a. <script src="/path/to/script.js"></script>
		
		b. <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/3.2.0/lodash.js"></script>
		
		d. Multitag script
			<script src="/js/script1.js"></script>
			<script src="/js/script2.js"></script>

		e. A single <script> tag can’t have both the src attribute and code inside.
				This won’t work:
				/*
						   <script src="file.js">
							alert(1); // the content is ignored, because src is set
							</script>
				*/
		f. We must choose either an external <script src="…"> or a regular <script> with code.
				The example above can be split into two scripts to work:
				/*
					<script src="file.js"></script>

					<script>
					alert(1);
					</script>
				*/
		g. The type and language attributes are not required. Older versins of HTML uses <script type='text/javascript' />, no more of this in newer versins of HTML [HTML5]
		h. We can use a <script> tag to add JavaScript code to a page.
		i. A script in an external file can be inserted with <script src="path/to/script.js"></script>
		h. As a rule, only the simplest scripts are put into HTML. More complex ones reside in separate files. The benefit of a separate file is that the browser will download it and store it in its cache.
			Other pages that reference the same script will take it from the cache instead of downloading it, so the file is actually downloaded only once. That reduces traffic and makes pages faster.

Coding Standards ?
We recommend putting semicolons between statements even if they are separated by newlines. 
The error in the no-semicolon variant occurs because JavaScript does not assume a semicolon before square brackets [...].

Differences between strict mode and the “default” mode ?
1. The "use strict" directive switches the engine to the “modern” mode, changing the behavior of some built-in features.
2. Strict mode is enabled by placing "use strict" at the top of a script or function. Several language features, like “classes” and “modules”, enable strict mode automatically.
3. Strict mode is supported by all modern browsers.
4. We recommended always starting scripts with "use strict". 

Reserved Words : let, var, const,return, for, if, do, while, switch, function, etc

Variable
1. Variable is a “named storage” for data.
2. The name must contain only letters, digits, or the symbols $ and _.
3. The first character must not be a digit.
	Examples :  
			let userName;
			let test123;
4. Variables named apple and AppLE are two different variables.
5. Non-Latin letters are allowed, but not recommended
	a. let – is a modern variable declaration.
		let message = 'Hello!'; 
	b.var – is an old-school variable declaration.
		var message = 'Hello!'; 
	c. const – is like let, but the value of the variable can’t be changed.
		const COLOR_RED = "#F00";

Data types
1. A variable in JavaScript can contain any data. A variable can at one moment be a string and at another be a number. Programming languages that allow such things are called “dynamically typed”
Example : 
	// no error
	let message = "hello";
	message = 123456;
2. There are seven basic data types in JavaScript.
->The number type represents both integer and floating point numbers.
*A string
->In JavaScript, there are 3 types of quotes.
Double quotes: "Hello".
Single quotes: 'Hello'.
Backticks: `Hello`.
->Double and single quotes are “simple” quotes. There’s no difference between them in JavaScript.
->Backticks are “extended functionality” quotes. They allow us to embed variables and expressions into a string by wrapping them in ${…}, for example:
12).Conditional operators: if, '?' -> or Ternary operators
->If Condition 
We can use the if statement and the conditional operator ?, that’s also called a “question mark” operator.
The if(...) statement evaluates a condition in parentheses and, if the result is true, executes a block of code.
Your code block with curly braces {} every time you use an if statement, even if there is only one statement to execute.
->else Condition
The if statement may contain an optional “else” block. It executes when the condition is false.
->Boolean conversion
A number 0, an empty string "", null, undefined, and NaN all become false. Because of that they are called “falsy” values.
13).Logical operators
->There are three logical operators in JavaScript: || (OR), && (AND), ! (NOT).
Can be applied to values of any type, not only boolean. 
->"OR"
The “OR” operator is represented with two vertical line symbols:
In classical programming, the logical OR is meant to manipulate boolean values only. If any of its arguments are true, it returns true, otherwise it returns false.
The result is always "true" except for the case when both operands are "false".
For each operand, converts it to boolean. If the result is true, stops and returns the original value of that operand.
If all operands have been evaluated (i.e. all were false), returns the last operand.
->&& (AND)
The AND operator is represented with two ampersands &&:
AND returns true if both operands are truthy and false otherwise:
For each operand, converts it to a boolean. If the result is false, stops and returns the original value of that operand.
If all operands have been evaluated (i.e. all were truthy), returns the last operand.
-> ! NOT
The boolean NOT operator is represented with an exclamation sign !.
Converts the operand to boolean type: true/false.
14).Loops
outputting goods from a list one after another or just running the same code for each number from 1 to 10.
->While Loop
Loops are a way to repeat the same code multiple times.
While the condition is truthy, the code from the loop body is executed.
Any expression or variable can be a loop condition, not just comparisons: the condition is evaluated and converted to a boolean by while.
->Do While Loop
The condition check can be moved below the loop body using the do..while syntax:
The loop will first execute the body, then check the condition, and, while it’s truthy, execute it again and again.
This form of syntax should only be used when you want the body of the loop to execute at least once regardless of the condition being truthy. Usually, the other form is preferred: while(…) {…}.
->For Loop
The loop below runs alert(i) for i from 0 up to (but not including) 3:
That is, begin executes once, and then it iterates: after each condition test, body and step are executed.
->For In Loop

->For Of Loop

15).Switch statement
A switch statement can replace multiple if checks.
It gives a more descriptive way to compare a value with multiple variants.
The switch has one or more case blocks and an optional default.
If no case is matched then the default code is executed (if it exists).
16).Function
Functions are the main “building blocks” of the program. They allow the code to be called many times without repetition.
This example clearly demonstrates one of the main purposes of functions: to avoid code duplication.
->Local variables
A variable declared inside a function is only visible inside that function.
->Global variables
Variables declared outside of any function, such as the outer userName in the code above, are called global.
Global variables are visible from any function (unless shadowed by locals).
->Parameters
We can pass arbitrary data to functions using parameters (also called function arguments) .
->Returning a value
A function can return a value back into the calling code as the result.
It is possible to use return without a value. That causes the function to exit immediately.
A function with an empty return or without it returns undefined
If a function does not return a value, it is the same as if it returns undefined:
->Why is there a semicolon at the end?
why does Function Expression have a semicolon ; at the end, but Function Declaration does not:
	/*
	function sayHi() {
  // ...
}

let sayHi = function() {
  // ...
};
*/
->There’s no need for ; at the end of code blocks and syntax structures that use them like if { ... }, for { }, function f { } etc.
->A Function Expression is used inside the statement: let sayHi = ...;, as a value. It’s not a code block, but rather an assignment.
The semicolon ; is recommended at the end of statements, no matter what the value is. So the semicolon here is not related to the Function Expression itself, it just terminates the statement.
->Callback functions

17).Strings
In JavaScript, the textual data is stored as strings. There is no separate type for a single character.
The internal format for strings is always UTF-16, it is not tied to the page encoding.
17).Strings
In JavaScript, the textual data is stored as strings. There is no separate type for a single character.
The internal format for strings is always UTF-16, it is not tied to the page encoding.
Strings can be enclosed within either single quotes, double quotes or backticks:
